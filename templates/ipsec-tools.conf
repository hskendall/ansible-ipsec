#jinja2:lstrip_blocks: True, trim_blocks:True
#!/usr/sbin/setkey -f
# {{ ansible_managed }}
# IPSec mode: {{ ipsec_mode }}
# SPD/SAD IPSec configuration for {{inventory_hostname}}

flush;
spdflush;

{% for hostname in groups['ipsec'] %}

    {% for ipv in ipset_inet %}

        {# set default prefix lengths #}
        {% if ipv == 'ansible_default_ipv4' %}
            {% set lprefix=32 %}
            {% set rprefix=32 %}
            {% set icmp="icmp" %}
        {% endif %}
        {% if ipv == 'ansible_default_ipv6' %}
            {% set lprefix=128 %}
            {% set rprefix=128 %}
            {% set icmp="ipv6-icmp" %}
        {% endif %}

        {# make Ansible host variables a bit more meaningful #}
        {% set lhost=inventory_hostname %}
        {% set rhost=hostname %}

        {% if ipsec_policy != 'disable' and rhost != lhost and ipv in hostvars[lhost] and ipv in hostvars[rhost] %}

            {# obtain local and remote IP addresses from facts #}
            {% set local_ip=hostvars[lhost][ipv]['address'] %}
            {% set remote_ip=hostvars[rhost][ipv]['address'] %}

            {# 'prefix' field is only found in IPv6 facts #}
            {% if 'prefix' in hostvars[lhost][ipv] %}
                {% set lprefix=hostvars[lhost][ipv]['prefix'] %}
            {% endif %}
            {% if 'prefix' in hostvars[rhost][ipv] %}
                {% set rprefix=hostvars[lhost][ipv]['prefix'] %}
            {% endif %}

            {# convert to CIDR, used both by IPv4 and IPv6; these are defaults, can be modified further down #}
            {% set lcidr=(local_ip, '/', lprefix) | join %}
            {% set rcidr=(remote_ip, '/', rprefix) | join %}

            {% if ipsec_mode == 'setkey' %}
### BEGIN SAD entries for {{ lhost }}:{{ local_ip }} <-> {{ rhost }}:{{ remote_ip }}
                {% set run_date=(template_run_date['year'], template_run_date['month'], template_run_date['day']) | join %}
                {# cryptographic algorithms for manual setkey mode #}
                {% set cipher="aes-cbc" %}
                {% set mac="hmac-sha256" %}
                {% set ipsec_comp=False %}

{# key generation for manual setkey mode #}
{% macro enc(host1, host2) %}  0x{{ ( run_date, host1 , host2 , ipsec_secret , "ESP" )   | sort | join | hash('sha256') | truncate(32,end='') }} {% endmacro %}
{% macro auth(host1, host2) %} 0x{{ ( run_date, host1 , host2 , ipsec_secret , "MAC" )   | sort | join | hash('sha256') | truncate(64,end='') }} {% endmacro %}
{% macro spi(host1, host2) %}  0x{{ ( run_date, host1 , host2 , ipsec_secret , "SPI" )   | sort | join | hash('sha256') | truncate(6,end='') }} {% endmacro %}

add {{ local_ip }} {{ remote_ip }} esp {{ spi(local_ip,remote_ip) }} -E {{ cipher }} {{ enc(local_ip,remote_ip) }} -A {{ mac }} {{ auth(local_ip, remote_ip) }} ;
add {{ remote_ip }} {{ local_ip }} esp {{ spi(remote_ip,local_ip) }} -E {{ cipher }} {{ enc(remote_ip, local_ip) }} -A {{ mac }} {{ auth(remote_ip, local_ip) }} ;
            {% endif %}

            {# IPv6 processing is a bit more complicated if forwarding is enabled since we need to create SPD entries for the whole subnet rather than single external IP #}
            {% if '::' in local_ip %}
                {# convert 2a01:4f8:13b:29a3::2 -> 2a01:4f8:13b:29a3 #}
                {% set lsubnet=local_ip.split('::')[0] %}
                {% if ipsec_forward %}
                    {# convert to whole CIDR subnet e,g, 2a01:4f8:13b:29a3::/64 #}
                    {% set lcidr=( lsubnet, '::/', lprefix) | join %}
                {% endif %}
            {% endif %}
            {% if '::' in remote_ip %}
                {% set rsubnet=remote_ip.split('::')[0] %}
                {% if ipsec_forward %}
                    {% set rcidr=( rsubnet, '::/', rprefix) | join %}
                {% endif %}
            {% endif %}

### BEGIN SPD entries for {{ lhost }}:{{ lcidr }} <-> {{ rhost }}:{{ rcidr }}
            {% if ipsec_open_icmp %}
# pass through ICMP
spdadd {{lcidr}} {{rcidr}} {{ icmp }} -P out none;
spdadd {{rcidr}} {{lcidr}} {{ icmp }} -P in  none;
            {% endif %}
            {% if ipsec_open_ssh %}
# pass through SSH
spdadd {{lcidr}}[any] {{rcidr}}[22] tcp -P out none;
spdadd {{rcidr}}[22] {{lcidr}}[any] tcp -P in  none;
spdadd {{lcidr}}[22] {{rcidr}}[any] tcp -P out none;
spdadd {{rcidr}}[any] {{lcidr}}[22] tcp -P in  none;
            {% endif %}

# input/output traffic
spdadd {{ local_ip }} {{ remote_ip }} any -P out ipsec {% if ipsec_compress %}ipcomp/transport//use{% endif %} esp/transport//{{ ipsec_policy }};
spdadd {{ remote_ip }} {{ local_ip }} any -P in  ipsec {% if ipsec_compress %}ipcomp/transport//use{% endif %} esp/transport//{{ ipsec_policy }};

            {% if ipsec_forward %}
# forward traffic
                {% if ipsec_open_icmp %}
spdadd {{lcidr}} {{rcidr}} {{ icmp }} -P fwd none;
spdadd {{rcidr}} {{lcidr}} {{ icmp }} -P fwd none;
                {% endif %}
                {% if ipsec_open_ssh %}
# pass through SSH
spdadd {{lcidr}}[any] {{rcidr}}[22] tcp -P fwd none;
spdadd {{rcidr}}[22] {{lcidr}}[any] tcp -P fwd none;
spdadd {{lcidr}}[22] {{rcidr}}[any] tcp -P fwd none;
spdadd {{rcidr}}[any] {{lcidr}}[22] tcp -P fwd none;
                {% endif %}

spdadd {{lcidr}} {{rcidr}} any -P fwd ipsec esp/tunnel/{{ local_ip }}-{{ remote_ip }}/{{ ipsec_policy }};
spdadd {{lcidr}} {{rcidr}} any -P out ipsec esp/tunnel/{{ local_ip }}-{{ remote_ip }}/{{ ipsec_policy }};

spdadd {{rcidr}} {{lcidr}} any -P fwd ipsec esp/tunnel/{{ remote_ip }}-{{ local_ip }}/{{ ipsec_policy }};
spdadd {{rcidr}} {{lcidr}} any -P in  ipsec esp/tunnel/{{ remote_ip }}-{{ local_ip }}/{{ ipsec_policy }};
            {% endif %}

        {% endif %}

    {% endfor %}

{% endfor %}
